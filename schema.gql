# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  city: String!
  country: Country!
  id: Float!
  isActive: Boolean!
  isCurrent: Boolean!
  line1: String!
  updtOp: User!
  updtTs: DateTime!
  zipCode: String!
}

input AddressSaveArgs {
  city: String!
  countryIsoCode: String!
  line1: String!
  zipCode: String!
}

type BankAccount {
  bankAccountCustomerPrintableNumber: String!
  displayName: String!
  iban: String!
  id: Float!
  isActive: Boolean!
  isCurrent: Boolean!
  swift: String!
  updtOp: User!
  updtTs: DateTime!
}

type Country {
  displayName: String!
  id: Float!
  isActive: Boolean!
  isCurrent: Boolean!
  isoCode: String!
  updtOp: User!
  updtTs: DateTime!
}

type Currency {
  displayName: String!
  id: Float!
  isActive: Boolean!
  isCurrent: Boolean!
  isoCode: String!
  updtOp: User!
  updtTs: DateTime!
}

type Customer {
  displayName: String!
  id: Float!
  idNumber: String!
  invoicingEmail: String!
  isActive: Boolean!
  isCurrent: Boolean!
  legalAddress: Address!
  legalName: String!
  salesInvoices: [SalesInvoice!]!
  updtOp: User!
  updtTs: DateTime!
  vatNumber: String
}

input CustomerSaveArgs {
  displayName: String!
  id: Int
  idNumber: String!
  invoicingEmail: String!
  legalAddress: AddressSaveArgs!
  legalName: String!
  vatNumber: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input IdAndNumber {
  id: Float!
  value: Float!
}

type Menu {
  displayName: String!
  id: Float!
  isActive: Boolean!
  isCurrent: Boolean!
  items: [MenuItem!]!
  updtOp: User!
  updtTs: DateTime!
}

type MenuItem {
  displayName: String!
  id: Float!
  isActive: Boolean!
  isCurrent: Boolean!
  menu: Menu!
  to: String!
  updtOp: User!
  updtTs: DateTime!
}

type Mutation {
  createCustomer(args: CustomerSaveArgs!): Customer!
  createMonthlyInvoice(args: SalesInvoiceMonthlySaveArgs!): [SalesInvoice!]!
  keepAlive(clientId: String!): UniversalDateTime!
}

type Organization {
  contact: String!
  displayName: String!
  id: Float!
  idNumber: String!
  isActive: Boolean!
  isCurrent: Boolean!
  legalName: String!
  registration: String!
  updtOp: User!
  updtTs: DateTime!
  vatNumber: String!
}

type Query {
  customer(id: Int!): Customer!
  customers: [Customer!]!
  customersByArgs(displayName: String, legalName: String): [Customer!]!
  menu: [Menu!]!
  now: UniversalDateTime!
  organizations: [Organization!]!
  salesInvoice(id: Int!): SalesInvoice!
  salesInvoices: [SalesInvoice!]!
}

type SalesInvoice {
  bankAccount: BankAccount!
  content: String!
  currency: Currency!
  currencyMultiplyingRateToAccountingSchemeCurrency: Float!
  customer: Customer!
  documentNo: String
  dueDate: DateTime!
  grandTotal: Float!
  grandTotalAccountingSchemeCurrency: Float!
  id: Float!
  isActive: Boolean!
  isCalculated: Boolean!
  isCurrent: Boolean!
  isDraft: Boolean!
  issuedOn: DateTime!
  lines: [SalesInvoiceLine!]!
  organization: Organization!
  paymentTermInDays: Float!
  printDate: DateTime
  printed: Boolean!
  printError: String
  printLanguageIsoCode: String!
  reverseCharge: Boolean!
  totalLines: Float!
  totalLinesAccountingSchemeCurrency: Float!
  transactionDate: DateTime!
  updtOp: User!
  updtTs: DateTime!
  vatReport: [SalesInvoiceVat!]!
}

type SalesInvoiceLine {
  id: Float!
  isActive: Boolean!
  isCurrent: Boolean!
  lineOrder: Float!
  linePrice: Float!
  narration: String!
  quantity: Float!
  updtOp: User!
  updtTs: DateTime!
}

input SalesInvoiceMonthlySaveArgs {
  dailyRate: Float!
  day: Int!
  eurToCzkRate: Float!
  month: Int!
  narration: String!
  organizationDivider: [IdAndNumber!]!
  totalHours: Float!
  year: Int!
}

type SalesInvoiceVat {
  id: Float!
  isActive: Boolean!
  isCurrent: Boolean!
  updtOp: User!
  updtTs: DateTime!
  vatRatePercent: Float!
  vatTotal: Float!
  vatTotalAccountingSchemeCurrency: Float!
  vatTotalAccountingSchemeCurrencyRaw: Float!
  vatTotalRaw: Float!
}

scalar UniversalDateTime

type User {
  email: String
  id: Float!
  isActive: Boolean!
  isCurrent: Boolean!
  name: String
  updtOpId: Float!
  updtTs: DateTime!
  username: String
}
